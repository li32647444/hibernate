hibernate注解

================理论=====================================

使用注解的目的：为了简化繁琐的ORM映射文件（*.hbm）的配置。

JPA全程Java Persistence API
JPA 通过 JDK 5.0 注解或 XML 描述对象－关系表的映射关系，并将运行期的实体 对象持久化到数据库中
JPA注解是javaEE的规范和标准

JPA是标准接口，hibernate是实现，但是其功能是JPA的超集。

hibernate通过hibernate-annotation、hibernate-entitymanager和hibernate-core三个组件来实现JPA



================hibernate.cfg.xml=====================================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
    	<!-- 数据库相关配置 -->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">123456</property>
        <property name="hibernate.connection.url">
        	<![CDATA[
        		jdbc:mysql://localhost:3306/hibernate?useUicode=true&characterEncoding=utf8
        	]]>
        </property>
        <!--开发常用参数 -->
        <property name="show_sql">true</property>
        <property name="format_sql">true</property>
        <property name="hbm2ddl.auto">update</property>
        <!-- 会话相关配置 -->
        <property name="hibernate.current_session_context_class">thread</property>
        
        <mapping class="com.lb.entity.Student"/>
        
    </session-factory>
</hibernate-configuration>


======================JAR关联包========================================
antlr-2.7.7.jar
dom4j-1.6.1.jar
hibernate-commons-annotations-4.0.4.Final.jar
hibernate-core-4.3.0.Final.jar
hibernate-jpa-2.1-api-1.0.0.Final.jar
jandex-1.1.0.Final.jar
javassist-3.18.1-GA.jar
jboss-logging-3.1.3.GA.jar
jboss-logging-annotations-1.2.0.Beta1.jar
jboss-transaction-api_1.2_spec-1.0.0.Final.jar
junit-4.10.jar
mysql-connector-java-5.1.5-bin.jar


======================类级别注解@Entity @Table @Embeddable========================================
@Entity
@Entity：映射实体类
@@Entity(name="tableName")
name:可选，对应数据库中的一个表。若表名与实体类名相同，则可以省略。
注意：使用@Entity时必须指定实体类的主键属性。

@Table
@Table(name="",catalog="",schema="")
@Entity配合使用，只能标注在实体的class定义处，表示实体对应的数据库表的信息。
name：可选，映射表的名称，默认表名和实体名称一致，只有在不一致的情况下才需要指定表名。
catalog-可选，表示Catalog名称，默认为Catalog("")。
schema-可选，表示Schema名称，默认为Schema("")。
从实现的角度来看，各种数据库系统对Catalog和Schema的支持和实现方式千差万别的。
@Table(name="tbl_sky",
	uniqueConstraints = {@UniqueConstraint(columnNames={"month", "day"})}
	)
通过uniqueConstraints设置唯一约束。

@Embeddable
@Embeddable表示一个非Entity类可以嵌入到另一个Entity类中作为属性而存在。


======================属性级别注解========================================
添加方式：
	一是写在属性字段上面
	二是写在属性的get访问器的上面
	
@Id
@Id:必须，定义了映射到数据库表的主键的属性，一个实体类可以有一个或者多个属性被映射为主键，可置于主键属性或者getXxxx()前。
注意：如果有多个属性定义为主键属性，该实体类必须实现serializable接口。String类型时长度不可太大。

@GeneratedValue
@GeneratedValue(strategy=GenerationType,generator=""):可选，用于定义主键生成策略。
strategy表示主键生成策略，取值有：
1.GenerationType.AUTO:根据低层数据库自动选择（默认）
2.GenerationType.INDENTITY:根据数据库的Identity字段生成
3.GenerationType.SEQUENCE:使用Sequence来决定主键的取值
4.GenerationType.TABLE:使用指定表来决定主键取值，结合@TableGenerator使用
如：
@Id
@TableGenerator(name="tab_cat_gen",allocationSize=1)
GeneratedValue(Strategy=GenerationType.TABLE)
Generator-表示主键生成器的名称，这个属性通常和ORM框架相关，
例如：Hibernate可以指定uuid等主键生成方式

@Column
@Column-可将属性映射到列，使用该注解来覆盖默认值，@Column描述了数据库表中该字段的详细定义，
这对于根据JPA注解生成数据库表结构的工具非常有作用。
常用属性：
name：可选，表示数据库表中该字段的名称，默认情形属性名称一致。
nullable：可选，表示该字段是否允许为null，默认为true。
unique：可选，表示该字段是否是唯一标识，默认为false。
length：可选，表示该字段的大小，仅对String类型的字段有效，默认值255.（如果是主键不能使用默认值）
insertable：可选，表示在ORM框架执行插入操作时，该字段是否应出现Insert语句中，默认为true。
updateable：可选，表示在ORM框架执行更新操作时，该字段是否应出现在update语句中，默认为true。对于一经创建就不可以更改的字段，该属性非常有用，如对于birthday字段。

@Embedded
@Embedded是注释属性的，表示该属性的类是嵌入类。
注意：同时嵌入类也必须标注@Embeddable注解。

@EmbeddedId
@EmbeddedId使用嵌入式主键类实现复合主键。
注意：嵌入式主键类必须实现Serializable接口、必须有默认的public无参数的构造方法、必须覆盖equals和hashCode方法。

@Transient
可选，表示该属性并非一个到数据库表的字段的映射，ORM框架将忽略该属性，
如果一个属性并非数据库表的字段映射，就务必将其标示为@Transient，否则ORM框架默认其注解为@Basic。

@Temporal(TemporalType.Date)
如果数据类型为时间的时候要用到@Temporal注解

@Basic
实体Bean中所有非static 非 transient 属性都可以被持久化，除非用@Transient注解。

@Lob 
注解属性将被持久化为 Blog 或 Clob 类型。
具体的java.sql.Clob, Character[], char[] 和 java.lang.String 将被持久化为 Clob 类型.
 java.sql.Blob, Byte[], byte[] 和 serializable type 将被持久化为 Blob 类型。
 
 
 
=================关系映射级别注解============================================================
一对一单向外键
@OneToOne(cascade=CascadeType.ALL)
@joinColumn(name="pid",unique=true)
注意：保存时应该先保存外键对象，再保存主表对象。
通过@PrimaryKeyJoinColumn 注解定义了一对一的关联关系。

一对一双向外键
主控方的配置同一对一单向外键关联
@OneToOne(mappedBy="card")//被控方
双向关联，必须设置mappedBy属性。因为双向关联只能交给一方去控制，不可能在双方都设置外键保存关联关系，否则双方都无法保存。

一对一双向外键联合主键
创建主键类
主键类必须实现serializable接口，重写equals()和hashCode()方法。
主键类
@Embeddable
实体类
@embeddedId

多对一单向外键
@ManyToOne(cascade={CascadeType.ALL},fetch=FetchType.EAGER)
@JoinColumn(name="cid",referencedColumnName="CID")

一对多单向外键
@OneToMany(cascade={CascadeType.ALL},fetch=FetchType.LAZY)
@JoinColumn(name="cid")


一对多（多对一）双向外键
多方：多方持有一方的引用。
@ManyToOne(cascade={CascadeType.ALL},fetch=FetchType.EAGER)
@JoinColumn(name="cid",referencedColumnName="CID")
一方：一方持有多方的集合。
@OneToMany(cascade={CascadeType.ALL},fetch=FetchType.LAZY)
@JoinColumn(name="cid")


多对多单向外键
@ManyToMany
@JoinTable(name="teachers_students",
	joinColumns={@JoinColumn(name="sid")},
	inverseJoinColumns={@JoinColumn(name="tid")}
	)


多对多双向外键
双方持有对方的集合对象，
其中一方设置
@ManyToMany(mappedBy="teachers")
另一方：
@ManyToMany
@JoinTable(name="teachers_students",
	joinColumns={@JoinColumn(name="sid")},
	inverseJoinColumns={@JoinColumn(name="tid")}
	)



	默认值：
	关联表名：主表表名 + 下划线 + 从表表名；
	关联表到主表的外键：主表表名 + 下划线 + 主表中主键列名；
	关联表到从表的外键名：主表中用于关联的属性名 + 下划线 + 从表的主键列名。
	用 cascading 实现持久化（Transitive persistence）cascade 属性接受值为 CascadeType 数组，其类型如下：
		CascadeType.PERSIST: cascades the persist (create) operation to associated entities persist() is called or if the entity is managed 
							如果一个实体是受管状态，或者当 persist() 函数被调用时，触发级联创建(create)操作。
		CascadeType.MERGE: cascades the merge operation to associated entities if merge() is called or if the entity is managed 
							如果一个实体是受管状态，或者当 merge() 函数被调用时，触发级联合并(merge)操作。
		CascadeType.REMOVE: cascades the remove operation to associated entities if delete() is called 当 delete() 
							函数被调用时，触发级联删除(remove)操作。
		CascadeType.REFRESH: cascades the refresh operation to associated entities if refresh() is called  
							当 refresh() 函数被调用时，出发级联更新(refresh)操作。
		CascadeType.ALL: all of the above  以上全部